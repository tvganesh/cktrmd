idvar = "country",
timevar = "year",
xvar = "GDP",
yvar = "Life Expectancy",
sizevar ="Population",
colorvar = "region")
plot(gg)
elecAccess= WDI(indicator='EG.ELC.ACCS.ZS', country="all",start=1960, end=2016)
# Electric power consumption
elecConsumption= WDI(indicator='EG.USE.ELEC.KH.PC', country="all",start=1960, end=2016)
#CO2 emissions
co2Emissions= WDI(indicator='EN.ATM.CO2E.KT', country="all",start=1960, end=2016)
j1 <- join(population, gdp)
j2 <- join(j1,elecAccess)
j3 <- join(j2,elecConsumption)
j4 <- join(j3,co2Emissions)
wbData <- join(j4,fertility)
ee = subset(wbData1, country %in% ccc$country)
j1 <- join(population, gdp)
j2 <- join(j1,elecAccess)
j3 <- join(j2,elecConsumption)
wbData1 <- join(j3,co2Emissions)
ee = subset(wbData1, country %in% ccc$country)
ff = join(ee,countries_df)
names(population)[3]="Population"
names(gdp)[3]="GDP"
names(elecAccess)[3]="Access to Electricity"
names(elecConsumption)[3]="Electric power consumption per capita"
names(co2Emissions)[3]="CO2 emisions"
gg<- gvisMotionChart(ff,
idvar = "country",
timevar = "year",
xvar = "GDP",
yvar = "Access to Electricity",
sizevar ="Population",
colorvar = "region")
plot(gg)
population = WDI(indicator='SP.POP.TOTL', country="all",start=1960, end=2016)
# GDP
gdp= WDI(indicator='NY.GDP.MKTP.CD', country="all",start=1960, end=2016)
# Access to electricity
elecAccess= WDI(indicator='EG.ELC.ACCS.ZS', country="all",start=1960, end=2016)
# Electric power consumption per capita
elecConsumption= WDI(indicator='EG.USE.ELEC.KH.PC', country="all",start=1960, end=2016)
#CO2 emissions
co2Emissions= WDI(indicator='EN.ATM.CO2E.KT', country="all",start=1960, end=2016)
names(population)[3]="Population"
names(gdp)[3]="GDP"
names(elecAccess)[3]="Access to Electricity"
names(elecConsumption)[3]="Electric power consumption per capita"
names(co2Emissions)[3]="CO2 emisions"
j1 <- join(population, gdp)
j2 <- join(j1,elecAccess)
j3 <- join(j2,elecConsumption)
wbData1 <- join(j3,co2Emissions)
```
wdi_data =WDI_data
# The 1st matrix is the list is the set of all World Bank Indicators
indicators=wdi_data[[1]]
# The 2nd  matrix gives the set of countries and regions
countries=wdi_data[[2]]
df = as.data.frame(countries)
aa <- df$region != "Aggregates"
# Remove the aggregates
countries_df <- df[aa,]
# Subset from the development data only those corresponding to the countries
ee = subset(wbData1, country %in% ccc$country)
ff = join(ee,countries_df)
gg<- gvisMotionChart(ff,
idvar = "country",
timevar = "year",
xvar = "GDP",
yvar = "Access to Electricity",
sizevar ="Population",
colorvar = "region")
plot(gg)
sanitationAccess= WDI(indicator='SH.STA.ACSN', country="all",start=1960, end=2016)
names(sanitationAccess)[3]="Access to sanitation(% popn)"
names(sanitationAccess)[3]="Access to sanitation(% popn)"
j1 <- join(population, gdp)
j2 <- join(j1,elecAccess)
j3 <- join(j2,elecConsumption)
j4 <- join(j3,co2Emissions)
wbData1 <- join(j3,sanitationAccess)
ee = subset(wbData1, country %in% ccc$country)
ff = join(ee,countries_df)
gg<- gvisMotionChart(ff,
idvar = "country",
timevar = "year",
xvar = "GDP",
yvar = "Access to Electricity",
sizevar ="Population",
colorvar = "region")
plot(gg)
library(WDI)
library(ggplot2)
library(googleVis)
library(plyr)
gg<- gvisMotionChart(cc,
idvar = "country",
timevar = "year",
xvar = "GDP",
yvar = "Life Expectancy",
sizevar ="Population",
colorvar = "region")
plot(gg)
cat(gg$html$chart, file="chart1.html")
cat(gg$html$chart, file="chart1.html")
getwd()
gg1<- gvisMotionChart(ff,
idvar = "country",
timevar = "year",
xvar = "GDP",
yvar = "Access to Electricity",
sizevar ="Population",
colorvar = "region")
plot(gg1)
cat(gg1$html$chart, file="chart2.html")
shiny::runApp('C:/software/cricket-package/cricsheet/googly')
shiny::runApp('C:/software/cricket-package/cricsheet/googly')
runApp('C:/software/cricket-package/cricsheet/googly')
IPLTeamsAll <- gsub(".RData","",a2)
runApp('C:/software/cricket-package/cricsheet/googly')
-.5*5 +0.5*3
a= 1 *0.8 *2^5*0.2
a
b= 1 *0/3*.7^5 *.7
b
c=a/a+b
c
b= 1 *0.3*.7^5 *.7
b
a= 1 *0.8 *.2^5*0.2
a
b= 1 *0.3*.7^5 *.7
b
c=a/a+b
c
c=a/(a+b)
c
a= 1 *0.8 *.2^5*0.2
a
b= 1 *0.3*.7^5 *.7
b
d= b/(a+b)
d
a= 1 *0.8 *.2^5*0.5
a
b= 1 *0.3*.7^5 *.5
b
c=a/(a+b)
c
d= b/(a+b)
d
a1= 6 * 0.5^2 *0.4^2
b1= 6 *.7^2*.3^2
c1=6 *.3^2*.7^2
d1=a1/(a1+b1+c1)
d1
e1= (b1+c1)/(a1+b1+c1)
e1
a= 1 *0.8^0 *.2^5*0.5
a
b= 1 *0.3^0 *.7^5 *0.5
b
c=a/(a+b)
c
0.2^5
0.2^5*.5
a= 1 *0.8^0 *.2^5*0.5
a
b= 1 *0.3^0 *.7^5 *0.5
b
c=a/(a+b)
c
d= b/(a+b)
d
a1= 6 * 0.5^2 *0.4^2
b1= 6 *.7^2*.3^2
c1=6 *.3^2*.7^2
a1= 6 * 0.5^2 *0.4^2*0.4
b1= 6 *.7^2*.3^2 * 0.3
c1=6 *.3^2*.7^2 *0.3
d1=a1/(a1+b1+c1)
d1
e1= (b1+c1)/(a1+b1+c1)
e1
theta=seq(0,1,by=0.01)
plot(theta,dbeta(theta,1,5))
1/5
1-pbeta(0.5,1,5)
1-pbeta(0.95,8,16)
1-pbeta(0.95,2,2)
pbeta(q=0.35, shape1=8, shape2=16)
pbeta(q=0.35, shape1=0, shape2=5)
pbeta(0.5,1,5)
1-pbeta(0.5,1,5)
pbeta(0.5,1,5)
qbeta(p=0.975, shape1=8, shape2=16)
frames <- list("./data/tendulkarVsAusInAus.csv","./data/gavaskarVsAusInAus.csv","./data/kohliVsAusInAus.csv",
"./data/sehwagVsAusInAus.csv","./data/vvslaxmanVsAusInAus.csv")
names <- list("S Tendulkar","S Gavaskar","V Kohli","V Sehwag","VVS Laxman")
a <- clean("./data/gavaskarVsAusInAus.csv")
library(cricketr)
a <- clean("./data/gavaskarVsAusInAus.csv")
setwd("C:/software/cricket-package/git/cricketrA")
a <- clean("./data/gavaskarVsAusInAus.csv")
dim(a)
a
frames <- list("./data/tendulkarVsAusInAus.csv","./data/gavaskarVsAusInAus.csv","./data/kohliVsAusInAus.csv",
"./data/sehwagVsAusInAus.csv","./data/vvslaxmanVsAusInAus.csv")
names <- list("S Tendulkar","S Gavaskar","V Kohli","V Sehwag","VVS Laxman")
relativeBatsmanSR(frames,names)
relativeBatsmanSR(frames,names)
frames <- list("./data/tendulkarVsWInWI.csv","./data/dravidVsWInWI.csv","./data/vvslaxmanVsWIInWI.csv",
"./data/gavaskarVsWIInWI.csv")
names <- list("S Tendulkar","R Dravid","VVS Laxman","S Gavaskar")
relativeRunsFreqPerf(frames,names)
relativeBatsmanSR(frames,names)
col1 <- rainbow(length(frames))
for(i in 1:length(frames))
{
# Clean batsman data
batsman <- clean(frames[[i]])
# Create a vector of runs with intervals of 15
maxi <- (max(batsman$Runs/15) + 1) *15
v <- seq(0,maxi,by=15)
a <- hist(batsman$Runs,breaks=v,plot=FALSE)
# Compute the Mean Strike Rate for each run range
SR <- NULL
for(j in 2:length(a$breaks))  {
b <- batsman$Runs > a$breaks[j-1] & batsman$Runs <= a$breaks[j]
c <- batsman[b,]
SR[j-1] <- mean(as.numeric(as.character(c$SR)))
}
# Find all intervals where there is no data i.e. NAN
b <- !is.na(SR)
#Subset and remove the NANs for counts
c <- a$mid[b]
)
frames <- list("./data/tendulkarVsWInWI.csv","./data/dravidVsWInWI.csv","./data/vvslaxmanVsWIInWI.csv",
"./data/gavaskarVsWIInWI.csv")
names <- list("S Tendulkar","R Dravid","VVS Laxman","S Gavaskar")
relativeBatsmanSR(frames,names)
col1 <- rainbow(length(frames))
for(i in 1:length(frames))
{
# Clean batsman data
batsman <- clean(frames[[i]])
# Create a vector of runs with intervals of 15
maxi <- (max(batsman$Runs/15) + 1) *15
v <- seq(0,maxi,by=15)
a <- hist(batsman$Runs,breaks=v,plot=FALSE)
# Compute the Mean Strike Rate for each run range
SR <- NULL
for(j in 2:length(a$breaks))  {
b <- batsman$Runs > a$breaks[j-1] & batsman$Runs <= a$breaks[j]
c <- batsman[b,]
SR[j-1] <- mean(as.numeric(as.character(c$SR)))
}
# Find all intervals where there is no data i.e. NAN
b <- !is.na(SR)
#Subset and remove the NANs for counts
c <- a$mid[b]
#Subset and remove the NANs for Strike Rate
SR <- SR[b]
par(mar=c(4,4,1,1))
if(i==1) {
plot(c,predict(loess(SR~c)),xlab="Runs",ylab="Mean Strike Rate",
xlim=c(0,400), ylim=c(0,90), type="l",lty=1,lwd=3, col=col1[i],
main="Relative Mean Strike Rate")
} else {
lines(c,predict(loess(SR~c)),col=col1[i],lwd=3)
}
}
type = rep(1,length(frames))
width = rep(2.5,length(frames))
legend(x="topright",legend=names, lty=type,
lwd=width,col=col1,bty="n",cex=0.8)
frames <- list("./data/gavaskarVsWIInWI.csv")
names <- list("S Gavaskar")
relativeBatsmanSR(frames,names)
i=1
batsman <- clean(frames[[i]])
# Create a vector of runs with intervals of 15
maxi <- (max(batsman$Runs/15) + 1) *15
v <- seq(0,maxi,by=15)
a <- hist(batsman$Runs,breaks=v,plot=FALSE)
# Compute the Mean Strike Rate for each run range
SR <- NULL
for(j in 2:length(a$breaks))  {
b <- batsman$Runs > a$breaks[j-1] & batsman$Runs <= a$breaks[j]
c <- batsman[b,]
SR[j-1] <- mean(as.numeric(as.character(c$SR)))
}
# Find all intervals where there is no data i.e. NAN
b <- !is.na(SR)
#Subset and remove the NANs for counts
c <- a$mid[b]
#Subset and remove the NANs for Strike Rate
SR <- SR[b]
par(mar=c(4,4,1,1))
if(i==1) {
plot(c,predict(loess(SR~c)),xlab="Runs",ylab="Mean Strike Rate",
xlim=c(0,400), ylim=c(0,90), type="l",lty=1,lwd=3, col=col1[i],
main="Relative Mean Strike Rate")
} else {
lines(c,predict(loess(SR~c)),col=col1[i],lwd=3)
}
c
SR
SR
c
lines(c,predict(lm(SR~c)),col=col1[i],lwd=3)
frames <- list("./data/tendulkarVsWInWI.csv","./data/dravidVsWInWI.csv","./data/vvslaxmanVsWIInWI.csv",
"./data/gavaskarVsWIInWI.csv")
names <- list("S Tendulkar","R Dravid","VVS Laxman","S Gavaskar")
relativeBatsmanCumulativeStrikeRate(frames,names)
frames <- list("./data/amlaVsIndInInd.csv","./data/ancookVsIndInInd.csv","./data/mhaydenVsIndInInd.csv",
"./data/vrichardsVsIndInInd.csv")
names <- list("H Amla","AN Cook","M Hayden","Viv Riachards")
relativeRunsFreqPerf(frames,names)
relativeBatsmanSR(frames,names)
relativeBatsmanCumulativeAvgRuns(frames,names)
relativeBatsmanCumulativeStrikeRate(frames,names)
relativeBatsmanCumulativeAvgRuns(frames,names)
kumble=getPlayerData(30176  ,opposition=1,host=1,file="kumbleVsEngInEng.csv",type="bowling")
murali=getPlayerData(49636  ,opposition=1,host=1,file="muraliVsEngInEng.csv",type="bowling")
warne=getPlayerData(8166  ,opposition=1,host=1,file="warneVsEngInEng.csv",type="bowling")
frames <- list("./data/tendulkarVsWInWI.csv","./data/dravidVsWInWI.csv","./data/vvslaxmanVsWIInWI.csv",
"./data/gavaskarVsWIInWI.csv")
names <- list("S Tendulkar","R Dravid","VVS Laxman","S Gavaskar")
relativeBatsmanSR(frames,names)
col1 <- rainbow(length(frames))
for(i in 1:length(frames))
{
# Clean batsman data
batsman <- clean(frames[[i]])
# Create a vector of runs with intervals of 15
maxi <- (max(batsman$Runs/15) + 1) *15
v <- seq(0,maxi,by=15)
a <- hist(batsman$Runs,breaks=v,plot=FALSE)
# Compute the Mean Strike Rate for each run range
SR <- NULL
for(j in 2:length(a$breaks))  {
b <- batsman$Runs > a$breaks[j-1] & batsman$Runs <= a$breaks[j]
c <- batsman[b,]
SR[j-1] <- mean(as.numeric(as.character(c$SR)))
}
# Find all intervals where there is no data i.e. NAN
b <- !is.na(SR)
#Subset and remove the NANs for counts
c <- a$mid[b]
#Subset and remove the NANs for Strike Rate
SR <- SR[b]
par(mar=c(4,4,1,1))
if(i==1) {
plot(c,predict(loess(SR~c)),xlab="Runs",ylab="Mean Strike Rate",
xlim=c(0,400), ylim=c(0,90), type="l",lty=1,lwd=3, col=col1[i],
main="Relative Mean Strike Rate")
} else {
lines(c,predict(lm(SR~poly(c,3)),col=col1[i],lwd=3)
}
}
type = rep(1,length(frames))
width = rep(2.5,length(frames))
legend(x="topright",legend=names, lty=type,
lwd=width,col=col1,bty="n",cex=0.8)
mtext("Data source-Courtesy:ESPN Cricinfo", side=1, line=4, adj=1.0, cex=0.8, col="blue")
col1 <- rainbow(length(frames))
for(i in 1:length(frames))
{
# Clean batsman data
batsman <- clean(frames[[i]])
# Create a vector of runs with intervals of 15
maxi <- (max(batsman$Runs/15) + 1) *15
v <- seq(0,maxi,by=15)
a <- hist(batsman$Runs,breaks=v,plot=FALSE)
# Compute the Mean Strike Rate for each run range
SR <- NULL
for(j in 2:length(a$breaks))  {
b <- batsman$Runs > a$breaks[j-1] & batsman$Runs <= a$breaks[j]
c <- batsman[b,]
SR[j-1] <- mean(as.numeric(as.character(c$SR)))
}
# Find all intervals where there is no data i.e. NAN
b <- !is.na(SR)
#Subset and remove the NANs for counts
c <- a$mid[b]
#Subset and remove the NANs for Strike Rate
SR <- SR[b]
par(mar=c(4,4,1,1))
if(i==1) {
plot(c,predict(loess(SR~c)),xlab="Runs",ylab="Mean Strike Rate",
xlim=c(0,400), ylim=c(0,90), type="l",lty=1,lwd=3, col=col1[i],
main="Relative Mean Strike Rate")
} else {
lines(c,predict(lm(SR~poly(c,3))),col=col1[i],lwd=3)
}
}
type = rep(1,length(frames))
width = rep(2.5,length(frames))
legend(x="topright",legend=names, lty=type,
lwd=width,col=col1,bty="n",cex=0.8)
col1 <- rainbow(length(frames))
for(i in 1:length(frames))
{
# Clean batsman data
batsman <- clean(frames[[i]])
# Create a vector of runs with intervals of 15
maxi <- (max(batsman$Runs/15) + 1) *15
v <- seq(0,maxi,by=15)
a <- hist(batsman$Runs,breaks=v,plot=FALSE)
# Compute the Mean Strike Rate for each run range
SR <- NULL
for(j in 2:length(a$breaks))  {
b <- batsman$Runs > a$breaks[j-1] & batsman$Runs <= a$breaks[j]
c <- batsman[b,]
SR[j-1] <- mean(as.numeric(as.character(c$SR)))
}
# Find all intervals where there is no data i.e. NAN
b <- !is.na(SR)
#Subset and remove the NANs for counts
c <- a$mid[b]
#Subset and remove the NANs for Strike Rate
SR <- SR[b]
par(mar=c(4,4,1,1))
if(i==1) {
plot(c,predict(loess(SR~c)),xlab="Runs",ylab="Mean Strike Rate",
xlim=c(0,400), ylim=c(0,90), type="l",lty=1,lwd=3, col=col1[i],
main="Relative Mean Strike Rate")
} else {
lines(c,predict(lm(SR~poly(c,2))),col=col1[i],lwd=3)
}
}
type = rep(1,length(frames))
width = rep(2.5,length(frames))
legend(x="topright",legend=names, lty=type,
lwd=width,col=col1,bty="n",cex=0.8)
col1 <- rainbow(length(frames))
for(i in 1:length(frames))
{
# Clean batsman data
batsman <- clean(frames[[i]])
# Create a vector of runs with intervals of 15
maxi <- (max(batsman$Runs/15) + 1) *15
v <- seq(0,maxi,by=15)
a <- hist(batsman$Runs,breaks=v,plot=FALSE)
# Compute the Mean Strike Rate for each run range
SR <- NULL
for(j in 2:length(a$breaks))  {
b <- batsman$Runs > a$breaks[j-1] & batsman$Runs <= a$breaks[j]
c <- batsman[b,]
SR[j-1] <- mean(as.numeric(as.character(c$SR)))
}
# Find all intervals where there is no data i.e. NAN
b <- !is.na(SR)
#Subset and remove the NANs for counts
c <- a$mid[b]
#Subset and remove the NANs for Strike Rate
SR <- SR[b]
par(mar=c(4,4,1,1))
if(i==1) {
plot(c,predict(loess(SR~c)),xlab="Runs",ylab="Mean Strike Rate",
xlim=c(0,400), ylim=c(0,90), type="l",lty=1,lwd=3, col=col1[i],
main="Relative Mean Strike Rate")
} else {
lines(c,predict(loess(SR~c)),col=col1[i],lwd=3)
}
}
type = rep(1,length(frames))
width = rep(2.5,length(frames))
legend(x="topright",legend=names, lty=type,
lwd=width,col=col1,bty="n",cex=0.8)
relativeBatsmanSR(frames,names)
frames <- list("./data/kumbleVsEngInEng.csv",".data/muraliVsEngInEng.csv","./data/warneVsEngInEng.csv")
names <- list("Anil KUmble","M Muralitharan","Shane Warne")
relativeBowlingPerf(frames,names)
frames <- list("./data/kumbleVsEngInEng.csv","./data/muraliVsEngInEng.csv","./data/warneVsEngInEng.csv")
names <- list("Anil KUmble","M Muralitharan","Shane Warne")
relativeBowlingPerf(frames,names)
relativeBowlingER(frames,names)
relativeBowlerCumulativeAvgWickets(frames,names)
relativeBowlerCumulativeAvgEconRate(frames,names)
relativeBowlingPerf(frames,names)
relativeBowlerCumulativeAvgWickets(frames,names)
relativeBowlerCumulativeAvgEconRate(frames,names)
kumbleSA=getPlayerData(30176  ,opposition=3,host=3,file="kumbleVsSAInSA.csv",type="bowling")
muraliSA=getPlayerData(49636  ,opposition=3,host=3,file="muraliVsSAInSA.csv",type="bowling")
warneSA=getPlayerData(8166  ,opposition=3,host=3,file="warneVsSAInSA.csv",type="bowling")
frames <- list("./data/kumbleVsSAInSA.csv","./data/muraliVsSAInSA.csv","./data/warneVsSAInSA.csv")
names <- list("Anil KUmble","M Muralitharan","Shane Warne")
relativeBowlerCumulativeAvgWickets(frames,names)
relativeBowlerCumulativeAvgEconRate(frames,names)
relativeBowlerCumulativeAvgEconRate(frames,names)
frames <- list("./data/kumbleVsEngInEng.csv","./data/muraliVsEngInEng.csv","./data/warneVsEngInEng.csv")
names <- list("Anil KUmble","M Muralitharan","Shane Warne")
relativeBowlerCumulativeAvgWickets(frames,names)
relativeBowlerCumulativeAvgEconRate(frames,names)
frames <- list("./data/kumbleVsSAInSA.csv","./data/muraliVsSAInSA.csv","./data/warneVsSAInSA.csv")
names <- list("Anil KUmble","M Muralitharan","Shane Warne")
relativeBowlerCumulativeAvgWickets(frames,names)
relativeBowlerCumulativeAvgEconRate(frames,names)
cawalshInd=getPlayerData(53216  ,opposition=6,host=6,file="cawalshVsIndInInd.csv",type="bowling")
arobertsInd=getPlayerData(52817  ,opposition=6,host=6,file="arobertsIndInInd.csv",type="bowling")
mmarshallInd=getPlayerData(52419  ,opposition=6,host=6,file="mmarshallVsIndInInd.csv",type="bowling")
gmccgrathInd=getPlayerData(6565  ,opposition=6,host=6,file="mccgrathVsIndInInd.csv",type="bowling")
frames <- list("./data/cawalshVsIndInInd.csv","./data/arobertsIndInInd.csv","./data/mmarshallVsIndInInd.csv",
"./data/mccgrathVsIndInInd.csv")
names <- list("C Walsh","A Roberts","M Marshall","G McGrath")
relativeBowlerCumulativeAvgWickets(frames,names)
relativeBowlerCumulativeAvgEconRate(frames,names)
